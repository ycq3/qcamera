/Users/pipiqiang/code/camera/app/src/main/java/com/camera/app/CustomCameraManager.java:106: Error: Call requires permission which may be rejected by user: code should explicitly check to see if permission is available (with checkPermission) or explicitly handle a potential SecurityException [MissingPermission]
            manager.openCamera(cameraId, stateCallback, backgroundHandler);
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "MissingPermission":
   This check scans through your code and libraries and looks at the APIs
   being used, and checks this against the set of permissions required to
   access those APIs. If the code using those APIs is called at runtime, then
   the program will crash.

   Furthermore, for permissions that are revocable (with targetSdkVersion 23),
   client code must also be prepared to handle the calls throwing an exception
   if the user rejects the request for permission at runtime.

/Users/pipiqiang/code/camera/app/src/main/AndroidManifest.xml:8: Warning: WRITE_EXTERNAL_STORAGE no longer provides write access when targeting Android 10+ [ScopedStorage]
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "ScopedStorage":
   Scoped storage is enforced on Android 10+ (or Android 11+ if using
   requestLegacyExternalStorage). In particular, WRITE_EXTERNAL_STORAGE will
   no longer provide write access to all files; it will provide the equivalent
   of READ_EXTERNAL_STORAGE instead.

   The MANAGE_EXTERNAL_STORAGE permission can be used to manage all files, but
   it is rarely necessary and most apps on Google Play are not allowed to use
   it. Most apps should instead migrate to use scoped storage. To modify or
   delete files, apps should request write access from the user as described
   at https://goo.gle/android-mediastore-createwriterequest.

   To learn more, read these resources: Play policy:
   https://goo.gle/policy-storage-help Allowable use cases:
   https://goo.gle/policy-storage-usecases

   https://goo.gle/android-storage-usecases

/Users/pipiqiang/code/camera/app/src/main/java/com/camera/app/PhotoGalleryActivity.java:75: Warning: Implicitly using the default locale is a common source of bugs: Use toLowerCase(Locale) instead. For strings meant to be internal use Locale.ROOT, otherwise Locale.getDefault(). [DefaultLocale]
                    if (file.isFile() && file.getName().toLowerCase().endsWith(".jpg")) {
                                                        ~~~~~~~~~~~
/Users/pipiqiang/code/camera/app/src/main/java/com/camera/app/StorageManager.java:74: Warning: Implicitly using the default locale is a common source of bugs: Use toLowerCase(Locale) instead. For strings meant to be internal use Locale.ROOT, otherwise Locale.getDefault(). [DefaultLocale]
                    return file.isFile() && file.getName().toLowerCase().endsWith(".jpg");
                                                           ~~~~~~~~~~~

   Explanation for issues of type "DefaultLocale":
   Calling String#toLowerCase() or #toUpperCase() without specifying an
   explicit locale is a common source of bugs. The reason for that is that
   those methods will use the current locale on the user's device, and even
   though the code appears to work correctly when you are developing the app,
   it will fail in some locales. For example, in the Turkish locale, the
   uppercase replacement for i is not I.

   If you want the methods to just perform ASCII replacement, for example to
   convert an enum name, call String#toUpperCase(Locale.US) instead. If you
   really want to use the current locale, call
   String#toUpperCase(Locale.getDefault()) instead.

   https://developer.android.com/reference/java/util/Locale.html#default_locale

/Users/pipiqiang/.gradle/caches/transforms-3/709e313730c50f0bedb0b3d49bcb6e66/transformed/work-runtime-2.7.1/jars/classes.jar!/androidx/work/WorkManager.class: Warning: Use enqueueUniquePeriodicWork() instead of enqueue() [BadPeriodicWorkRequestEnqueue from work-runtime-2.7.1]

   Explanation for issues of type "BadPeriodicWorkRequestEnqueue":
   When using enqueue() for `PeriodicWorkRequest`s, you might end up
   enqueuing
   duplicate requests unintentionally. You should be using
   enqueueUniquePeriodicWork with an ExistingPeriodicWorkPolicy.KEEP instead.

   Vendor: Android Open Source Project (work-runtime-2.7.1)
   Identifier: work-runtime-2.7.1
   Feedback: https://issuetracker.google.com/issues/new?component=192731

/Users/pipiqiang/code/camera/app/build.gradle:48: Warning: A newer version of androidx.appcompat:appcompat than 1.5.1 is available: 1.7.1 [GradleDependency]
    implementation 'androidx.appcompat:appcompat:1.5.1'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/pipiqiang/code/camera/app/build.gradle:49: Warning: A newer version of com.google.android.material:material than 1.7.0 is available: 1.13.0 [GradleDependency]
    implementation 'com.google.android.material:material:1.7.0'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/pipiqiang/code/camera/app/build.gradle:50: Warning: A newer version of androidx.constraintlayout:constraintlayout than 2.1.4 is available: 2.2.1 [GradleDependency]
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/pipiqiang/code/camera/app/build.gradle:51: Warning: A newer version of androidx.preference:preference than 1.2.0 is available: 1.2.1 [GradleDependency]
    implementation 'androidx.preference:preference:1.2.0'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/pipiqiang/code/camera/app/build.gradle:52: Warning: A newer version of androidx.work:work-runtime than 2.7.1 is available: 2.10.5 [GradleDependency]
    implementation 'androidx.work:work-runtime:2.7.1'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/pipiqiang/code/camera/app/build.gradle:57: Warning: A newer version of androidx.lifecycle:lifecycle-viewmodel than 2.5.1 is available: 2.9.4 [GradleDependency]
    implementation 'androidx.lifecycle:lifecycle-viewmodel:2.5.1'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/pipiqiang/code/camera/app/build.gradle:58: Warning: A newer version of androidx.lifecycle:lifecycle-viewmodel-ktx than 2.5.1 is available: 2.9.4 [GradleDependency]
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "GradleDependency":
   This detector looks for usages of libraries where the version you are using
   is not the current stable release. Using older versions is fine, and there
   are cases where you deliberately want to stick with an older version.
   However, you may simply not be aware that a more recent version is
   available, and that is what this lint check helps find.

/Users/pipiqiang/code/camera/app/src/main/java/com/camera/app/PhotoGalleryActivity.java:90: Warning: It will always be more efficient to use more specific change events if you can. Rely on notifyDataSetChanged as a last resort. [NotifyDataSetChanged]
        photoAdapter.notifyDataSetChanged();
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "NotifyDataSetChanged":
   The RecyclerView adapter's onNotifyDataSetChanged method does not specify
   what about the data set has changed, forcing any observers to assume that
   all existing items and structure may no longer be valid. `LayoutManager`s
   will be forced to fully rebind and relayout all visible views.

/Users/pipiqiang/code/camera/app/src/main/java/com/camera/app/CustomCameraManager.java:192: Warning: This SurfaceTexture should be freed up after use with #release() [Recycle]
            SurfaceTexture texture = new SurfaceTexture(0);
                                     ~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "Recycle":
   Many resources, such as TypedArrays, VelocityTrackers, etc., should be
   recycled (with a recycle() call) after use. This lint check looks for
   missing recycle() calls.

/Users/pipiqiang/code/camera/app/src/main/res/values/colors.xml:3: Warning: The resource R.color.purple_200 appears to be unused [UnusedResources]
    <color name="purple_200">#FFBB86FC</color>
           ~~~~~~~~~~~~~~~~~

   Explanation for issues of type "UnusedResources":
   Unused resources make applications larger and slow down builds.

   The unused resource check can ignore tests. If you want to include
   resources that are only referenced from tests, consider packaging them in a
   test source set instead.

   You can include test sources in the unused resource check by setting the
   system property lint.unused-resources.include-tests=true, and to exclude
   them (usually for performance reasons), use
   lint.unused-resources.exclude-tests=true.

/Users/pipiqiang/code/camera/app/src/main/res/layout/activity_main.xml:20: Warning: Missing contentDescription attribute on image [ContentDescription]
    <ImageView
     ~~~~~~~~~
/Users/pipiqiang/code/camera/app/src/main/res/layout/activity_photo_viewer.xml:13: Warning: Missing contentDescription attribute on image [ContentDescription]
        <ImageView
         ~~~~~~~~~
/Users/pipiqiang/code/camera/app/src/main/res/layout/item_photo.xml:8: Warning: Missing contentDescription attribute on image [ContentDescription]
    <ImageView
     ~~~~~~~~~

   Explanation for issues of type "ContentDescription":
   Non-textual widgets like ImageViews and ImageButtons should use the
   contentDescription attribute to specify a textual description of the widget
   such that screen readers and other accessibility tools can adequately
   describe the user interface.

   Note that elements in application screens that are purely decorative and do
   not provide any content or enable a user action should not have
   accessibility content descriptions. In this case, just suppress the lint
   warning with a tools:ignore="ContentDescription" attribute.

   Note that for text fields, you should not set both the hint and the
   contentDescription attributes since the hint will never be shown. Just set
   the hint.

   https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases

/Users/pipiqiang/code/camera/app/src/main/res/layout/activity_main.xml:61: Warning: Hardcoded string "测试存储", should use @string resource [HardcodedText]
        android:text="测试存储"
        ~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "HardcodedText":
   Hardcoding text attributes directly in layout files is bad for several
   reasons:

   * When creating configuration variations (for example for landscape or
   portrait) you have to repeat the actual text (and keep it up to date when
   making changes)

   * The application cannot be translated to other languages by just adding
   new translations for existing string resources.

   There are quickfixes to automatically extract this hardcoded string into a
   resource lookup.

1 errors, 18 warnings
